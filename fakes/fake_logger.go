// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/svett/giraffe"
)

type FakeLogger struct {
	SupportColorsStub        func() bool
	supportColorsMutex       sync.RWMutex
	supportColorsArgsForCall []struct{}
	supportColorsReturns struct {
		result1 bool
	}
	InfoStub        func(string)
	infoMutex       sync.RWMutex
	infoArgsForCall []struct {
		arg1 string
	}
}

func (fake *FakeLogger) SupportColors() bool {
	fake.supportColorsMutex.Lock()
	fake.supportColorsArgsForCall = append(fake.supportColorsArgsForCall, struct{}{})
	fake.supportColorsMutex.Unlock()
	if fake.SupportColorsStub != nil {
		return fake.SupportColorsStub()
	} else {
		return fake.supportColorsReturns.result1
	}
}

func (fake *FakeLogger) SupportColorsCallCount() int {
	fake.supportColorsMutex.RLock()
	defer fake.supportColorsMutex.RUnlock()
	return len(fake.supportColorsArgsForCall)
}

func (fake *FakeLogger) SupportColorsReturns(result1 bool) {
	fake.SupportColorsStub = nil
	fake.supportColorsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLogger) Info(arg1 string) {
	fake.infoMutex.Lock()
	fake.infoArgsForCall = append(fake.infoArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.infoMutex.Unlock()
	if fake.InfoStub != nil {
		fake.InfoStub(arg1)
	}
}

func (fake *FakeLogger) InfoCallCount() int {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return len(fake.infoArgsForCall)
}

func (fake *FakeLogger) InfoArgsForCall(i int) string {
	fake.infoMutex.RLock()
	defer fake.infoMutex.RUnlock()
	return fake.infoArgsForCall[i].arg1
}

var _ giraffe.Logger = new(FakeLogger)
